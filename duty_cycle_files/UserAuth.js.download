(function() {
  define("UserAuth", function(require, exports, module) {
    /*
    A module that handles user login status and login/logout requests
    @extend ModuleConfigObject
    */
    var $, Logging, Promise, UserAuth, Utils, baseApi, ref;
    $ = require("jquery");
    Logging = require("Logging");
    Promise = require("bluebird");
    Utils = require("Utils");
    baseApi = (ref = window.BASE_API_URL) != null ? ref : "..";
    UserAuth = (function() {
      class UserAuth {
        /*
        initializes the basic user authentication flow.
        @param {ErrorDisplay} err A location to display errors
        @return {Promise<UserAuth>}
        */
        init(err) {
          this.err = err;
          return this.isLoggedIn().then((isLoggedIn) => {
            console.log(`Logged in: ${isLoggedIn}`);
            if (isLoggedIn) {
              return this;
            }
            return new Promise((resolve, reject) => {
              return this.newAuth(() => {
                return resolve(this);
              });
            });
          });
        }

        /*
        Determines if the user is logged in with the server for this session.
        @param {Function} cb called with `true` if the user is logged in
        @return {Boolean} true if the server has authentication for this session
        */
        isLoggedIn(retry = 0) {
          return Promise.resolve($.get(`${baseApi}/auth/hasAuth/`)).then(function(data) {
            return data === "yes";
          }).catch(() => {
            return Logging.WARN("Unable to fetch authentication status from the server").dev("Error fetching /auth/hasAuth/").loc("UserAuth", "hasStoredAuth").attempts(retry).retry(() => {
              return this.isLoggedIn(retry + 1);
            }).send().display(this.err).retryPromise();
          });
        }

        /*
        Requests a new anonymous authentication ID from the server.
        @param {Function} cb called after the user is successfully registered as anonymous
        */
        newAuth(cb, retry = 0) {
          return $.getJSON(`${baseApi}/auth/anon/`).done((data) => {
            if (!data) {
              return Logging.WARN("Unable to request authentication from the server: error given.").dev("No response from /auth/anon/").loc("UserAuth", "newAuth").attempts(retry).retry(() => {
                return this.newAuth(cb, retry + 1);
              }).send().display(this.err);
            }
            if (!data.id) {
              return Logging.WARN("Unable to request authentication from the server: missing data.").dev("No ID included from /auth/anon/").loc("UserAuth", "newAuth").attempts(retry).retry(() => {
                return this.newAuth(cb, retry + 1);
              }).send().display(this.err);
            }
            Logging.DETAIL("got /auth/anon/").uid(data.id);
            this.id = data.id;
            return cb();
          }).fail(() => {
            return Logging.WARN("Unable to request authentication from the server: connection failed.").dev("Failed to connect to /auth/anon/").loc("UserAuth", "newAuth").attempts(retry).retry(() => {
              return this.newAuth(cb, retry + 1);
            }).send().display(this.err);
          });
        }

      };

      // @property {ErrorDisplay} A location to display errors
      UserAuth.prototype.err = null;

      // @property {String} An authentication ID provided by the server
      UserAuth.prototype.id = null;

      return UserAuth;

    }).call(this);
    Utils.extend(UserAuth, module.config());
    return UserAuth;
  });

}).call(this);
