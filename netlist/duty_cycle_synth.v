/* Generated by Yosys 0.56+30 (git sha1 8c71226d0, g++ 13.3.0-6ubuntu2~24.04 -fPIC -O3) */

(* top =  1  *)
(* src = "duty_cycle.v:23.1-44.10" *)
module duty_cycle(clk, reset, out);
  wire _0_;
  (* src = "duty_cycle.v:23.25-23.28" *)
  input clk;
  wire clk;
  (* src = "duty_cycle.v:25.15-25.25" *)
  reg [1:0] curr_state = 2'h0;
  (* src = "duty_cycle.v:25.40-25.50" *)
  wire [1:0] next_state;
  (* src = "duty_cycle.v:23.47-23.50" *)
  output out;
  wire out;
  (* src = "duty_cycle.v:23.29-23.34" *)
  input reset;
  wire reset;
  assign out = ~(curr_state[0] | curr_state[1]);
  assign _0_ = curr_state[1] & ~(curr_state[0]);
  assign next_state[0] = out | _0_;
  assign next_state[1] = curr_state[0] ^ curr_state[1];
  (* src = "duty_cycle.v:26.5-31.8" *)
  always @(posedge clk, posedge reset)
    if (reset) curr_state[0] <= 1'h1;
    else curr_state[0] <= next_state[0];
  (* src = "duty_cycle.v:26.5-31.8" *)
  always @(posedge clk, posedge reset)
    if (reset) curr_state[1] <= 1'h0;
    else curr_state[1] <= next_state[1];
endmodule
